"use strict";(self.webpackChunkfront_end_interview_questions=self.webpackChunkfront_end_interview_questions||[]).push([[735],{5580:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var s=i(4848),t=i(8453);const r={},l="Typescript (questions prepared)",o={id:"questions/typescript",title:"Typescript (questions prepared)",description:"1. The primitives (string , number , and boolean)",source:"@site/docs/questions/typescript.md",sourceDirName:"questions",slug:"/questions/typescript",permalink:"/front-end-interview-questions-answers/docs/questions/typescript",draft:!1,unlisted:!1,editUrl:"https://github.com/pathliving/front-end-interview-questions/docs/questions/typescript.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Javascript",permalink:"/front-end-interview-questions-answers/docs/questions/javascript"},next:{title:"React",permalink:"/front-end-interview-questions-answers/docs/questions/react"}},c={},a=[];function d(e){const n={code:"code",h1:"h1",li:"li",ol:"ol",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"typescript-questions-prepared",children:"Typescript (questions prepared)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The primitives (string , number , and boolean)"}),"\n",(0,s.jsx)(n.li,{children:"Less Common Primitives (bigint, symbol)"}),"\n",(0,s.jsx)(n.li,{children:"Arrays"}),"\n",(0,s.jsx)(n.li,{children:"Any"}),"\n",(0,s.jsx)(n.li,{children:"Type Annotations on Variables"}),"\n",(0,s.jsx)(n.li,{children:"Functions"}),"\n",(0,s.jsx)(n.li,{children:"Object types (optional properties, readonly properties, index signatures)"}),"\n",(0,s.jsx)(n.li,{children:"Mapped types (build on the index signatures syntax)"}),"\n",(0,s.jsx)(n.li,{children:"Tuple types"}),"\n",(0,s.jsx)(n.li,{children:"Union types"}),"\n",(0,s.jsx)(n.li,{children:"Template Literal types"}),"\n",(0,s.jsx)(n.li,{children:"Type Aliases"}),"\n",(0,s.jsx)(n.li,{children:"Interfaces"}),"\n",(0,s.jsx)(n.li,{children:"Differences Between Type Aliases* and Interfaces** (intersection* vs extending**, can\u2019t adding* vs adding new fields to an existing entity**)"}),"\n",(0,s.jsx)(n.li,{children:"Type Assertions (as)"}),"\n",(0,s.jsx)(n.li,{children:"Null and undefined (Non-null Assertion Operator (Postfix !))"}),"\n",(0,s.jsx)(n.li,{children:"Enums"}),"\n",(0,s.jsx)(n.li,{children:"typeof type guards (truthiness narrowing)"}),"\n",(0,s.jsx)(n.li,{children:"Equality narrowing (===, !==, ==, and !=)"}),"\n",(0,s.jsx)(n.li,{children:"The in operator narrowing"}),"\n",(0,s.jsx)(n.li,{children:"instanceof narrowing"}),"\n",(0,s.jsx)(n.li,{children:"Assignments"}),"\n",(0,s.jsx)(n.li,{children:"type predicates"}),"\n",(0,s.jsx)(n.li,{children:"Discriminated unions"}),"\n",(0,s.jsx)(n.li,{children:"never type"}),"\n",(0,s.jsx)(n.li,{children:"Call Signatures"}),"\n",(0,s.jsx)(n.li,{children:"Generic Functions (Inference, Constraints)"}),"\n",(0,s.jsx)(n.li,{children:"Optional Parameters in Callbacks"}),"\n",(0,s.jsx)(n.li,{children:"Function Overloads"}),"\n",(0,s.jsx)(n.li,{children:"void type"}),"\n",(0,s.jsx)(n.li,{children:"object type"}),"\n",(0,s.jsx)(n.li,{children:"unknown type"}),"\n",(0,s.jsx)(n.li,{children:"Function type"}),"\n",(0,s.jsx)(n.li,{children:"Namespaces vs Modules"}),"\n",(0,s.jsx)(n.li,{children:"File declarations (d.ts)"}),"\n",(0,s.jsxs)(n.li,{children:["Utility types (",(0,s.jsx)(n.code,{children:"Awaited<Type>, Partial<Type>, Required<Type>, Readonly<Type>, Record<Keys, Type>, Pick<Type, Keys>, Omit<Type, Keys>, Exclude<UnionType, ExcludedMembers>, Extract<Type, Union>, NonNullable<Type>, Parameters<Type>, ConstructorParameters<Type>, ReturnType<Type>, InstanceType<Type>, NoInfer<Type>, ThisParameterType<Type>, OmitThisParameter<Type>, ThisType<Type>, Intrinsic String Manipulation Types, Uppercase<StringType>, Lowercase<StringType>, Capitalize<StringType>, Uncapitalize<StringType>"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Decorators"}),"\n",(0,s.jsx)(n.li,{children:"Symbols"}),"\n",(0,s.jsx)(n.li,{children:"Triple-Slash Directives"}),"\n",(0,s.jsx)(n.li,{children:"Type Inference"}),"\n",(0,s.jsx)(n.li,{children:"using declarations"}),"\n",(0,s.jsx)(n.li,{children:"await using declarations"}),"\n",(0,s.jsx)(n.li,{children:"What strategies for migrating from JavaScript to TypeScript do you know?"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l});var s=i(6540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}}}]);