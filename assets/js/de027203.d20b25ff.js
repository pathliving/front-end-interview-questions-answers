"use strict";(self.webpackChunkfront_end_interview_questions=self.webpackChunkfront_end_interview_questions||[]).push([[360],{2458:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var r=s(4848),t=s(8453);const i={},a="Typescript (questions prepared)",c={id:"answers/typescript",title:"Typescript (questions prepared)",description:"1. The primitives (string, number, and boolean)",source:"@site/docs/answers/typescript.md",sourceDirName:"answers",slug:"/answers/typescript",permalink:"/docs/answers/typescript",draft:!1,unlisted:!1,editUrl:"https://github.com/pathliving/front-end-interview-questions/docs/answers/typescript.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Javascript",permalink:"/docs/answers/javascript"},next:{title:"React",permalink:"/docs/answers/react"}},l={},o=[];function p(e){const n={code:"code",h1:"h1",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"typescript-questions-prepared",children:"Typescript (questions prepared)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The primitives (string, number, and boolean)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'Primitives in TypeScript are the most basic types:\nstring: Represents textual data. Example: let name: string = "Alice";\nnumber: Represents numeric values. Example: let age: number = 30;\nboolean: Represents true/false values. Example: let isActive: boolean = true;\nReference'}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Less Common Primitives (bigint, symbol)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'bigint: Represents arbitrarily large integers. Example: let bigNum: bigint = 12345678901234567890n;\nsymbol: Represents unique and immutable identifiers. Example: let sym: symbol = Symbol("unique");\nReference\nReference'}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Arrays"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Arrays are used to store multiple values of the same type. Example: ",(0,r.jsx)(n.code,{children:"let list: number[] = [1, 2, 3];"}),"\nGeneric array type: ",(0,r.jsx)(n.code,{children:"let list: Array<number> = [1, 2, 3];"}),"\nReference"]}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Any"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'any type allows for values to bypass type-checking. Example: let anything: any = "hello";\nUseful for gradual typing or when working with dynamic content.\nReference'}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"Type Annotations on Variables"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'Type annotations explicitly specify the type of a variable. Example: let myName: string = "Alice";\nHelps with type checking and readability.\nReference'}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsx)(n.li,{children:"Functions"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Functions can have type annotations for parameters and return values. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function greet(name: string): string {\n  return `Hello, ${name}`;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"7",children:["\n",(0,r.jsx)(n.li,{children:"Object types (optional properties, readonly properties, index signatures)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Optional properties: ",(0,r.jsx)(n.code,{children:"interface User { name: string; age?: number; }"}),"\nReadonly properties: ",(0,r.jsx)(n.code,{children:"interface User { readonly id: number; name: string; }"}),"\nIndex signatures: ",(0,r.jsx)(n.code,{children:"interface StringArray { [index: number]: string; }"}),"\nReference\nReference\nReference"]}),"\n",(0,r.jsxs)(n.ol,{start:"8",children:["\n",(0,r.jsx)(n.li,{children:"Mapped types (build on the index signatures syntax)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Mapped types transform properties in a type. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Readonly<T> = {\n  readonly [P in keyof T]: T[P];\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"9",children:["\n",(0,r.jsx)(n.li,{children:"Tuple types"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Tuples represent an array with fixed types and length. Example: ",(0,r.jsx)(n.code,{children:'let person: [string, number] = ["Alice", 30];'}),"\nReference"]}),"\n",(0,r.jsxs)(n.ol,{start:"10",children:["\n",(0,r.jsx)(n.li,{children:"Union types"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Union types allow a variable to be one of several types. Example: ",(0,r.jsx)(n.code,{children:"let id: number | string;"}),"\nReference"]}),"\n",(0,r.jsxs)(n.ol,{start:"11",children:["\n",(0,r.jsx)(n.li,{children:"Template Literal types"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Template literal types allow concatenation of string literals at the type level. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Greeting = `Hello, ${string}`;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"12",children:["\n",(0,r.jsx)(n.li,{children:"Type Aliases"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Type aliases create a new name for a type. Example: ",(0,r.jsx)(n.code,{children:"type ID = number | string;"}),"\nReference"]}),"\n",(0,r.jsxs)(n.ol,{start:"13",children:["\n",(0,r.jsx)(n.li,{children:"Interfaces"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Interfaces define the shape of an object. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface User {\n  name: string;\n  age: number;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"14",children:["\n",(0,r.jsx)(n.li,{children:"Differences Between Type Aliases and Interfaces** (intersection vs extending**, can\u2019t adding* vs adding new fields to an existing entity**)**"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Type Aliases: Can represent primitives, unions, tuples, etc. Cannot be extended after creation.\nInterfaces: Can be extended using extends and allow for declaration merging.\nExample of intersection: ",(0,r.jsx)(n.code,{children:"type A = { x: number } & { y: number };"}),"\nExample of extending: ",(0,r.jsx)(n.code,{children:"interface B extends A { z: number; }"}),"\nReference"]}),"\n",(0,r.jsxs)(n.ol,{start:"15",children:["\n",(0,r.jsx)(n.li,{children:"Type Assertions (as)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Type assertions tell the compiler to treat a value as a specific type. Example: ",(0,r.jsx)(n.code,{children:'let someValue: any = "hello"; let strLength: number = (someValue as string).length;'}),"\nReference"]}),"\n",(0,r.jsxs)(n.ol,{start:"16",children:["\n",(0,r.jsx)(n.li,{children:"Null and undefined (Non-null Assertion Operator (Postfix !))"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Non-null assertion operator (!) tells the compiler a value is not null or undefined. Example: ",(0,r.jsx)(n.code,{children:"let name: string | null; name!;"}),"\nReference"]}),"\n",(0,r.jsxs)(n.ol,{start:"17",children:["\n",(0,r.jsx)(n.li,{children:"Enums"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Enums define a set of named constants. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"enum Color {\n  Red,\n  Green,\n  Blue,\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"18",children:["\n",(0,r.jsx)(n.li,{children:"typeof type guards (truthiness narrowing)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typeof checks the type of a variable at runtime. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'function isNumber(x: any): x is number {\n  return typeof x === "number";\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"19",children:["\n",(0,r.jsxs)(n.li,{children:["Equality narrowing ",(0,r.jsx)(n.code,{children:"(===, !==, ==, and !=)"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Equality narrowing uses comparison operators to narrow types. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'function example(x: string | number) {\n  if (x === "string") {\n    // x is string\n  } else {\n    // x is number\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"20",children:["\n",(0,r.jsx)(n.li,{children:"The in operator narrowing"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"in operator checks if a property exists in an object. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'function isSquare(shape: any): shape is Square {\n  return "size" in shape;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"21",children:["\n",(0,r.jsx)(n.li,{children:"instanceof narrowing"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"instanceof checks if an object is an instance of a class. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function logValue(x: Date | string) {\n  if (x instanceof Date) {\n    console.log(x.toUTCString());\n  } else {\n    console.log(x.toUpperCase());\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"22",children:["\n",(0,r.jsx)(n.li,{children:"Assignments"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"TypeScript infers types based on assignments. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'let x = "hello"; // x is inferred as string\n'})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"23",children:["\n",(0,r.jsx)(n.li,{children:"type predicates (isFish)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Type predicates are custom type guards. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsxs)(n.ol,{start:"24",children:["\n",(0,r.jsx)(n.li,{children:"Discriminated unions"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Discriminated unions use a common property to differentiate between types. Example:\ntypescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'interface Square {\n  kind: "square";\n  size: number;\n}\ninterface Circle {\n  kind: "circle";\n  radius: number;\n}\ntype Shape = Square | Circle;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Reference"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.ol,{start:"25",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"never type\nThe never type represents values that never occur. It is used to indicate that a function never returns (e.g., it throws an exception or terminates the program) or for variables that are impossible to have a value."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Call Signatures\nCall signatures define the type of a function by specifying the types of its parameters and its return type. In TypeScript, you can define a call signature within an interface or type alias."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Add = (a: number, b: number) => number;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"27",children:["\n",(0,r.jsx)(n.li,{children:"Generic Functions (Inference, Constraints)\nGeneric functions allow you to create functions that can work with any type, providing type inference and constraints for more flexibility."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Inference:\nTypeScript infers the type based on the function's usage."}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'function identity<T>(arg: T): T {\n  return arg;\n}\nlet output = identity("myString"); // TypeScript infers the type as string\n'})}),"\n",(0,r.jsx)(n.p,{children:"Constraints:\nYou can constrain a generic type to ensure it meets certain criteria."}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function loggingIdentity<T extends { length: number }>(arg: T): T {\n  console.log(arg.length); // Now we know it has a length property\n  return arg;\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"28",children:["\n",(0,r.jsx)(n.li,{children:"Optional Parameters in Callbacks\nOptional parameters in functions can be defined using ? after the parameter name."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'function greet(name: string, greeting?: string): string {\n  return `${greeting || "Hello"}, ${name}`;\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"29",children:["\n",(0,r.jsx)(n.li,{children:"Function Overloads\nFunction overloads allow you to define multiple signatures for a function. The implementation must handle all possible cases."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function add(a: number, b: number): number;\nfunction add(a: string, b: string): string;\nfunction add(a: any, b: any): any {\n  return a + b;\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"30",children:["\n",(0,r.jsx)(n.li,{children:"void type\nThe void type represents the absence of having any type at all. It is typically used as the return type of functions that do not return a value."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function logMessage(message: string): void {\n  console.log(message);\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"31",children:["\n",(0,r.jsx)(n.li,{children:"object type\nThe object type represents any non-primitive type, i.e., anything that is not number, string, boolean, symbol, null, or undefined."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'let obj: object = { name: "Alice" };\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"32",children:["\n",(0,r.jsx)(n.li,{children:"unknown type\nThe unknown type is the type-safe counterpart of any. It requires the developer to perform type assertions or checks before using it."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'let value: unknown = "Hello";\nif (typeof value === "string") {\n  console.log(value.toUpperCase()); // Safe to use as a string\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"33",children:["\n",(0,r.jsx)(n.li,{children:"Function type\nThe Function type describes any callable object, but it's better to specify the exact function signature."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let myFunc: (x: number, y: number) => number;\nmyFunc = function (a, b) {\n  return a + b;\n};\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"34",children:["\n",(0,r.jsx)(n.li,{children:"Namespaces vs Modules\nNamespaces are used for organizing code within a global scope, primarily in older codebases."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"namespace MyNamespace {\n  export class MyClass {}\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Modules (ES6 modules) are the standard for code organization, providing scoped code and avoiding global pollution."}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// In file1.ts\nexport class MyClass {}\n\n// In file2.ts\nimport { MyClass } from "./file1";\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"35",children:["\n",(0,r.jsx)(n.li,{children:"File declarations (d.ts)\nDeclaration files (.d.ts) provide type information about JavaScript code to TypeScript."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// lodash.d.ts\ndeclare module "lodash" {\n  export function chunk<T>(array: T[], size: number): T[][];\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"36",children:["\n",(0,r.jsxs)(n.li,{children:["Utility types\n",(0,r.jsx)(n.code,{children:"Awaited<Type>"}),": Resolves the type of a promise."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Result = Awaited<Promise<string>>; // string\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Partial<Type>"}),": Makes all properties in Type optional."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Person {\n  name: string;\n  age: number;\n}\ntype PartialPerson = Partial<Person>; // { name?: string; age?: number; }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Required<Type>"}),": Makes all properties in Type required."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type RequiredPerson = Required<PartialPerson>; // { name: string; age: number; }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Readonly<Type>"}),": Makes all properties in Type readonly."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type ReadonlyPerson = Readonly<Person>; // { readonly name: string; readonly age: number; }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Record<Keys, Type>"}),": Constructs an object type with a set of properties Keys of Type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type Roles = "admin" | "user";\ntype Permissions = Record<Roles, boolean>; // { admin: boolean; user: boolean; }\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Pick<Type, Keys>"}),": Creates a type by picking properties Keys from Type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type NameOnly = Pick<Person, "name">; // { name: string; }\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Omit<Type, Keys>"}),": Creates a type by omitting properties Keys from Type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type AgeOmitted = Omit<Person, "age">; // { name: string; }\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Exclude<UnionType, ExcludedMembers>"}),": Excludes members from a union type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type T = Exclude<"a" | "b" | "c", "a">; // "b" | "c"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Extract<Type, Union>"}),": Extracts members from a union type that are assignable to another type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type T = Extract<"a" | "b" | "c", "a" | "f">; // "a"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"NonNullable<Type>"}),": Excludes null and undefined from Type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type T = NonNullable<string | null>; // string\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Parameters<Type>"}),": Extracts the parameter types of a function type as an array."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type T = Parameters<(a: string, b: number) => void>; // [string, number]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ConstructorParameters<Type>"}),": Extracts the parameter types of a constructor type as an array."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type T = ConstructorParameters<ErrorConstructor>; // [message?: string]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ReturnType<Type>"}),": Extracts the return type of a function type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type T = ReturnType<() => string>; // string\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"InstanceType<Type>"}),": Extracts the instance type of a constructor function type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type T = InstanceType<typeof Date>; // Date\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"NoInfer<Type>"}),": Prevents TypeScript from inferring a type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type T<T> = T extends T ? true : false;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ThisParameterType<Type>"}),": Extracts this type from a function type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function toHex(this: Number) {\n  return this.toString(16);\n}\ntype T = ThisParameterType<typeof toHex>; // Number\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"OmitThisParameter<Type>"}),": Removes this parameter from a function type."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function toHex(this: Number) {\n  return this.toString(16);\n}\ntype T = OmitThisParameter<typeof toHex>; // () => string\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ThisType<Type>"}),": Specifies the type of this in a function."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface MyObject {\n  count: number;\n  increment(this: MyObject): void;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Intrinsic String Manipulation Types:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Uppercase<StringType>"}),": Transforms a string type to uppercase."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type T = Uppercase<"hello">; // "HELLO"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Lowercase<StringType>"}),": Transforms a string type to lowercase."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type T = Lowercase<"HELLO">; // "hello"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Capitalize<StringType>"}),": Transforms the first character of a string type to uppercase."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type T = Capitalize<"hello">; // "Hello"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Uncapitalize<StringType>"}),": Transforms the first character of a string type to lowercase."]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type T = Uncapitalize<"Hello">; // "hello"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"37",children:["\n",(0,r.jsx)(n.li,{children:"Decorators"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Decorators are special declarations that can be attached to classes and methods to modify their behavior. They are often used for logging, validation, or dependency injection."}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function Log(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  descriptor.value = function (...args: any[]) {\n    console.log(`Calling ${propertyKey} with arguments: ${args}`);\n    return originalMethod.apply(this, args);\n  };\n}\nclass Example {\n  @Log\n  greet(name: string) {\n    return `Hello, ${name}`;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"38",children:["\n",(0,r.jsx)(n.li,{children:"Symbols\nSymbols are a primitive data type representing unique tokens. They are often used as keys for object properties to avoid name collisions."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const uniqueKey = Symbol("key");\nconst obj = {\n  [uniqueKey]: "value",\n};\nconsole.log(obj[uniqueKey]); // "value"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"39",children:["\n",(0,r.jsx)(n.li,{children:"Triple-Slash Directives\nTriple-slash directives are single-line comments containing a single XML tag that provide instructions to the compiler."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'/// <reference path="path/to/file.ts" />\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"40",children:["\n",(0,r.jsx)(n.li,{children:"Type Inference\nType inference is a TypeScript feature where the compiler automatically determines the type of a variable based on its initial value or context."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let x = 10; // TypeScript infers x as number\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"41",children:["\n",(0,r.jsx)(n.li,{children:"using declarations\nusing declarations are used to manage resources that need to be explicitly disposed of when no longer needed. This feature is still a proposal in TypeScript and is influenced by C#."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"using resource = new DisposableResource();\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"42",children:["\n",(0,r.jsx)(n.li,{children:"await using declarations\nawait using declarations extend using to asynchronous contexts, ensuring resources are disposed of when the await completes. This is also a proposal."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"typescript\nCopy code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"await using resource = new AsyncDisposableResource();\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"43",children:["\n",(0,r.jsx)(n.li,{children:"What strategies for migrating from JavaScript to TypeScript do you know?\nIncremental Migration: Gradually convert JavaScript files to TypeScript by renaming .js files to .ts and addressing type issues incrementally.\nUsing any: Start with liberal use of the any type and gradually replace it with more specific types.\nType Declaration Files: Create .d.ts files for existing JavaScript libraries.\nStrict Mode: Enable TypeScript\u2019s strict mode to catch potential errors early and progressively address them.\nAutomated Tools: Use tools like ts-migrate to automate parts of the migration process.\nTesting: Ensure comprehensive testing during the migration to catch regressions and type-related issues."}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}}}]);